{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a3170563-0fa1-45e1-9aea-28ee58c8e4de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "############### Multi-Head Attention (First Layer) #############\n",
    "class MultiHeadAttention(nn.Module):\n",
    "    def __init__(self, d_model, n_heads, dropout=0.1):\n",
    "        super().__init__()\n",
    "        assert d_model % n_heads == 0, \"d_model must be divisible by n_heads\"\n",
    "        self.n_heads = n_heads\n",
    "        self.depth = d_model // n_heads\n",
    "        \n",
    "        self.wq = nn.Linear(d_model, d_model)\n",
    "        self.wk = nn.Linear(d_model, d_model)\n",
    "        self.wv = nn.Linear(d_model, d_model)\n",
    "        self.fc = nn.Linear(d_model, d_model)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        \n",
    "    def forward(self, query, key, value, mask=None):\n",
    "        batch_size = query.size(0)\n",
    "        \n",
    "        def split_heads(x):\n",
    "            return x.view(batch_size, -1, self.n_heads, self.depth).transpose(1, 2)\n",
    "        \n",
    "        Q, K, V = map(split_heads, [self.wq(query), self.wk(key), self.wv(value)])\n",
    "        scores = torch.matmul(Q, K.transpose(-2, -1)) / torch.sqrt(torch.tensor(self.depth, dtype=torch.float32))\n",
    "        if mask is not None:\n",
    "            scores = scores.masked_fill(mask == 0, -1e9)\n",
    "        attention_weights = F.softmax(scores, dim=-1)\n",
    "        output = torch.matmul(self.dropout(attention_weights), V)\n",
    "        output = output.transpose(1, 2).contiguous().view(batch_size, -1, self.n_heads * self.depth)\n",
    "        return self.fc(output)\n",
    "\n",
    "################# Feedforward Network ###############\n",
    "class FeedForwardNetwork(nn.Module):\n",
    "    def __init__(self, d_model, d_ff, dropout=0.1):\n",
    "        super().__init__()\n",
    "        self.fc1 = nn.Linear(d_model, d_ff)\n",
    "        self.fc2 = nn.Linear(d_ff, d_model)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        return self.fc2(self.dropout(F.relu(self.fc1(x))))\n",
    "\n",
    "###################### Encoder Layer ###################\n",
    "class EncoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, n_heads, d_ff, dropout=0.1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(d_model, n_heads, dropout)\n",
    "        self.ffn = FeedForwardNetwork(d_model, d_ff, dropout)\n",
    "        self.norm1 = nn.LayerNorm(d_model)\n",
    "        self.norm2 = nn.LayerNorm(d_model)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        \n",
    "    def forward(self, x, mask=None):\n",
    "        attn_output = self.mha(x, x, x, mask)\n",
    "        x = self.norm1(x + self.dropout(attn_output))\n",
    "        ffn_output = self.ffn(x)\n",
    "        return self.norm2(x + self.dropout(ffn_output))\n",
    "\n",
    "##################### Decoder Layer #################\n",
    "class DecoderLayer(nn.Module):\n",
    "    def __init__(self, d_model, n_heads, d_ff, dropout=0.1):\n",
    "        super().__init__()\n",
    "        self.mha1 = MultiHeadAttention(d_model, n_heads, dropout)\n",
    "        self.mha2 = MultiHeadAttention(d_model, n_heads, dropout)\n",
    "        self.ffn = FeedForwardNetwork(d_model, d_ff, dropout)\n",
    "        self.norm1 = nn.LayerNorm(d_model)\n",
    "        self.norm2 = nn.LayerNorm(d_model)\n",
    "        self.norm3 = nn.LayerNorm(d_model)\n",
    "        self.dropout = nn.Dropout(dropout)\n",
    "        \n",
    "    def forward(self, x, enc_output, self_mask=None, enc_dec_mask=None):\n",
    "        attn1 = self.mha1(x, x, x, self_mask)\n",
    "        x = self.norm1(x + self.dropout(attn1))\n",
    "        attn2 = self.mha2(x, enc_output, enc_output, enc_dec_mask)\n",
    "        x = self.norm2(x + self.dropout(attn2))\n",
    "        ffn_output = self.ffn(x)\n",
    "        return self.norm3(x + self.dropout(ffn_output))\n",
    "\n",
    "###################### Encoder ##################\n",
    "class Encoder(nn.Module):\n",
    "    def __init__(self, config):\n",
    "        super().__init__()\n",
    "        self.embedding = nn.Embedding(config.vocab_size, config.d_model)\n",
    "        self.layers = nn.ModuleList([EncoderLayer(config.d_model, config.n_heads, config.d_ff, config.dropout) for _ in range(config.num_layers)])\n",
    "        self.dropout = nn.Dropout(config.dropout)\n",
    "        \n",
    "    def forward(self, x, mask=None):\n",
    "        x = self.dropout(self.embedding(x))\n",
    "        for layer in self.layers:\n",
    "            x = layer(x, mask)\n",
    "        return x\n",
    "\n",
    "##################### Decoder #################\n",
    "class Decoder(nn.Module):\n",
    "    def __init__(self, config):\n",
    "        super().__init__()\n",
    "        self.embedding = nn.Embedding(config.vocab_size, config.d_model)\n",
    "        self.layers = nn.ModuleList([DecoderLayer(config.d_model, config.n_heads, config.d_ff, config.dropout) for _ in range(config.num_layers)])\n",
    "        self.dropout = nn.Dropout(config.dropout)\n",
    "        \n",
    "    def forward(self, x, enc_output, self_mask=None, enc_dec_mask=None):\n",
    "        x = self.dropout(self.embedding(x))\n",
    "        for layer in self.layers:\n",
    "            x = layer(x, enc_output, self_mask, enc_dec_mask)\n",
    "        return x\n",
    "\n",
    "##################### T5 Model #######################\n",
    "class T5(nn.Module):\n",
    "    def __init__(self, config):\n",
    "        super().__init__()\n",
    "        self.encoder = Encoder(config)\n",
    "        self.decoder = Decoder(config)\n",
    "        self.fc = nn.Linear(config.d_model, config.vocab_size)\n",
    "        \n",
    "    def forward(self, enc_input, dec_input, enc_mask=None, dec_mask=None, enc_dec_mask=None):\n",
    "        enc_output = self.encoder(enc_input, enc_mask)\n",
    "        dec_output = self.decoder(dec_input, enc_output, dec_mask, enc_dec_mask)\n",
    "        return self.fc(dec_output)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97b205e0-b619-4c37-b864-e28e846df2f4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
